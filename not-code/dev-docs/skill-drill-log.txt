
                                    Skill Drill Log

-------------------------------------------------------------------------------
        *  Serialise
        *  set classes move to lib
        *  unit test for sets
        *  Deserialise
        *  Consider interplay and dupe with serialize and api tests
        *  Use test assertions in older tests
        *  Move to test util or util/testutil package, with maybe lib move too
        *  Find how to fmt all or test all
        *  Lower case email
        *  Add in app state and user states
        *  Api to edit skill desc and title
        *  Api to get desc / title with / without context or just that 
           of parent.
        *  List emails of people with skill
        *  Has this user, this skill
        *  Timeout to ensure children in tree are in a sequence, and that they
           are kept in alpha order
        *  Skills seq from tree excl collapsed, with hier level
        *  Move skill to diff part of hierachy
        *  Case of addchild?
        *  Remove a person
            *  Start testing up
            *  How prove has been lost to supplemental ds?
            *  Add remove unit test to both in and strin gset
            *  Is overwrite still called on sets? (yes)
            *  Back fit comments before checkin
        *  Remove a skill
        *  Change semantics of remove fns to disallow removal of skills that a
           person has
        *  Some api fns orphaned at end of module
        *  Api getting a bit big (it's ok)
        *  Does remove person remove their user state? (yes)
        *  Does remove skill purge that skill from collapsed records?
        o  Rather than propogate - should we observe with callbacks?
            o  Consider how would do, and if cleaner.
            o  Consider performance implications of redundant firings.
        o  Expand a skill tree node
            o  Fold into collapse as boolean?

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Model use cases
    *  From user actions
        *  Register user with skill / deregister
        *  Edit skill title or desc
        *  Fmt desc with / without context of hierachy
        *  Fmt root of desc to aide editing
        *  List emails of people with skill
        *  Has this user, this skill
        *  Enumerate display model Collapse / expand behaviour
    *  From lifecycle
        *  Serialise whole model
        *  Build model from serialised
    *  From admin
        *  Move skill to diff part of hierachy
        *  Rename a skill
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
