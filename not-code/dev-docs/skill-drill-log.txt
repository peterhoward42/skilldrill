
                                    Skill Drill Log

-------------------------------------------------------------------------------
o  Sense that got too complicated
    *  Record smells
    *  Consider remedies at concept level
    *  Nail names of types and modules
    *  Skeleton out modules with type structs only
        *  rename some modules
        *  reinstate min error handling
        *  split node and tree
        *  compile up
        *  add tests for toggle presence of
        o  test build simple model with new and necessary queries
            *  return skillids from build simple model
            o  build up most obvious tests from build process
                *  switch to eclipse env
                *  does eclipse run gocode now?
                *  api should call only model fns incl comment
                *  uninstall / reinstall gocode with windows build variant
                   to see if stops crashing / hanging
                *  buildSimple should return ds not slice
                *  log into project now in eclipse
                o  enumerate nodes from tree incl those collapsed as side
                   effect
                   o  tweak names in enumerate fn to make clearer getting skillid list back
                o  test error production?
        o  serialise test
        o  add tests for additional use cases

-------------------------------------------------------------------------------
o  Record smells
    o  Api part of model rather than separate from
    o  Too many layers
    o  Too much logic in API layer
    o  Fragile to remember which objects might need changing when
       skill or person added or removed.
    o  Category and skill maybe should be different
    o  Having to use Uid's too much internally, when pointers would be
       better.
    o  Drifted away from perfectly consistent naming conventions.
    o  Too much volume of code given to error handling.
    o  Having UXP mixed in with global data model.
    o  Alpha ordering of children should be straightforward.
    o  Tree is insufficiently first class.
-------------------------------------------------------------------------------
o  Remedies - conceptual
    o  Have separate type for top model from api
    o  Thin API and demand more autonomy from sub models.
    o  When persons or skills are added or removed send alert message to
       all potentially interested parties by treating them as a collection that
       are obliged to support the alert interface.
    o  Separate categories and skills.
    o  Don't use Uid in any interfaces except those of API
    o  Write naming rules in advance.
    o  All errors would arise from programming errors, not user errors -
       so log them and generate crash. Kinda must idiom.
    o  Have first class skill tree type.
    o  Separate UXP model into separate package.

-------------------------------------------------------------------------------
Model use cases
    *  From user actions
        *  Register user with skill / deregister
        *  Edit skill title or desc
        *  Fmt desc with / without context of hierachy
        *  Fmt root of desc to aide editing
        *  List emails of people with skill
        *  Has this user, this skill
        *  Enumerate display model Collapse / expand behaviour
    *  From lifecycle
        *  Serialise whole model
        *  Build model from serialised
    *  From admin
        *  Move skill to diff part of hierachy
        *  Rename a skill
-------------------------------------------------------------------------------
email and ids are plain types

Custom types
    External
        ModelApi
    Internal
        model
        skill
        branch
        skillHoldings

    uiState
    uiStateStore
-------------------------------------------------------------------------------
