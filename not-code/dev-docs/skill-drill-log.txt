
                                    Skill Drill Log

-------------------------------------------------------------------------------

*  Define requirements
*  Design UXP
*  Design architecture
*  Design roadmap
*  Initiate project
    *  Create github repo
    *  Clone locally
    *  Move this and docs into it
    *  Delete old version of this
*  Do min bootstrap svr from real repo based on experiment
*  Try build from source on lappy to provide for x compile
    *  Remove go completely from webfaction if x compile works
        *  Remove file system from user home
        *  Remove mods to .bash_profile
        *  Ensure binary still runs
*  Tidy up webfaction document
o  Choose next target = core models and tests
    o  Parts of model
        *  Get started to shape code
        *  Consider use cases
        *  Consider tests
        o  Test up
            o  People funcs
                *  make build simple reusable fn
                *  dev up build simple to ex most add correct fns and bikd
                   skills
                   *  bestow uid on objects on creation
                   *  return uid from add fns
                   *  use uid as parent child handles
                *  don't inject uid into adders, make them do it and return val
                *  question what addn of dupe person is
                *  add some skill to person bindings
                *  disallow binding of non leaf skill
                    *  give skills attrib that says leaf or categ at constr
                    *  disallow binding of categories to people
                    *  have changed addskill to have 2 return values
                *  finish testing existing error handling
                    *  parent must be cat
                    *  give skill unknown person
        *  Nail comments
        *  Fix bugs
            *  err should be generated on giveperson skill if skill not known
            *  err should be generated on giveperson skill if is category
        o  Serialise
            *  Design output
            *  Read again techniques to generate
            o  Start test that serialises simple model
                o  Do just on skiilnode as experiment
                    *  Implement json.Marshaller
                    *  Try to use encoder maybe incl indent
                    o  What comes out?
                        o  How get newlines and indent?
                    o  Fix up children output
                    o  Test up
                o  What next
        o  Add in app state and user states


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Serialise output

data {
    fmt_version: 1
    skills: [
        {
            uid: 1000
            title: foo
            desc: bar
            role: CATEGORY
            parentId: -1
        },
        {
            title: baz
            desc: fibble
            role: CATEGORY
            parentId: 1000
        }
    ]
    people: [
        {
            uid: 2000
            email: fred.bloggs
        },
        {
            uid: 2001
            email: john.smith
        }
    ]
    skillholdings: {
        "fred.bloggs": [1000, 1001]
        "john.smith": [1000, 1001]
    }
}
-------------------------------------------------------------------------------
Model use cases
    o  From user actions
        o  Register user with skill / deregister
        o  Edit skill title or desc
        o  Fmt desc with / without context of hierachy
        o  Fmt root of desc to aide editing
        o  List emails of people with skill
        o  Has this user, this skill
        o  Enumerate display model Collapse / expand behaviour
    o  From lifecycle
        o  Level of node
        o  Serialise whole model
        o  Build model from serialised
    o  From admin
        o  Rename a skill
        o  Move skill to diff part of hierachy
-------------------------------------------------------------------------------

