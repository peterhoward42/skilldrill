
                                    Skill Drill Log

-------------------------------------------------------------------------------
        *  Serialise
        *  set classes move to lib
        *  unit test for sets
        *  Deserialise
        *  Consider interplay and dupe with serialize and api tests
        *  Use test assertions in older tests
        *  Move to test util or util/testutil package, with maybe lib move too
        *  Find how to fmt all or test all
        *  Lower case email
        *  Add in app state and user states
        *  Api to edit skill desc and title
        *  Api to get desc / title with / without context or just that of parent.
        *  List emails of people with skill
        *  Has this user, this skill
        o  Timeout to ensure children in tree are in a sequence, and that they
           are kept in alpha order
            *  Are children a slice already? = yes
            *  Does build simple disrupt alpha order?, no
                *  Change it so that it does disrupt and fix up existing tests
            *  Test that checks for alpha order should fail
                *  Doesn't fail? (does now)
            o  Satisfy order test
                *  Upgrade addSkill in api and addChild in skill.
                o  Test pass?
        o  Timeout to provide skill from title when unambig and use over
            o  Use Must idiom and keep in test module
        o  Skills seq from tree excl collapsed, with hier level
            o  Basics in place
            o  Get simple slices as expected
            o  Ensure collapsed treats children as should
            o  Ensure alpha order is working
        o  People who have skill should be alphabetical

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Model use cases
    o  From user actions
        *  Register user with skill / deregister
        *  Edit skill title or desc
        *  Fmt desc with / without context of hierachy
        *  Fmt root of desc to aide editing
        *  List emails of people with skill
        *  Has this user, this skill
        o  Enumerate display model Collapse / expand behaviour
    o  From lifecycle
        o  Level of node
        *  Serialise whole model
        *  Build model from serialised
    o  From admin
        o  Rename a skill
        o  Move skill to diff part of hierachy
-------------------------------------------------------------------------------
State for one user
    o  Which skill nodes are collapsed is sufficient setofint
    o  States for all users - one of these in map per email
-------------------------------------------------------------------------------

/*
The method sortChildrenByTitle() does an in-place sort of the given node's
children - in alphabetical order of title.
*/
func (parent *skillNode) sortChildrenByTitle() {
	origPositions := map[string]int{}
	titles := []string{}
	for idx, skillId := range parent.children {
        skill := api.
		title := skill.Title
		origPositions[title] = idx
		titles = append(titles, title)
	}
	sortedTitles := sort.Strings(titles)
	for _, title := range sortedTitles {
		origPosn := origPositions[title]
		sorted = append(sorted, unsorted[origPosn].Title)
	}
	return
}
-------------------------------------------------------------------------------
